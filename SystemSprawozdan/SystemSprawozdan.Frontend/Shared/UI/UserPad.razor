@inject NavigationManager NavigationManager
@inject IAppHttpClient AppHttpClient

<div class="user-pad">
	<div class="options @DropListClass()">
		<ul class="options-list">
			<li class="option" @onclick="()=>Logout()">
				<MatIcon Style="font-size: 1.8rem;" Icon="@MatIconNames.Meeting_room" />
				<span>Wyloguj</span>
			</li>
		</ul>
	</div>
	<div class="user-info" onclick="@(() => ChangeStatus())" >
		<div class="user-info__label">
			<MatIcon Style="font-size: 3.4rem;" Icon="@MatIconNames.Person" />
			<div class="user-info__name">
				<span>@FirstName</span>
				<span>@LastName</span>
			</div>
		</div>
		<div class="user-info__dropdown-icon-wrapper @DropListClass()"><MatIcon Style="font-size: 2rem;" Icon="@MatIconNames.Arrow_drop_down" /></div>
	</div>
</div>

@code {
	/// SPRAWDZIĆ!
	public string FirstName { get; set; }
	public string LastName { get; set; }

	public UserInfoGetDto User = new();
	protected override async Task OnInitializedAsync()
	{
		var student = await AppHttpClient.Get<UserInfoGetDto>("Account/userCredentials?isStudent=true");
		
		if (student.Name != null)
		{
			FirstName = student.Name;
			LastName = student.Surname;
		}
		else
		{
			var teacher = await AppHttpClient.Get<UserInfoGetDto>("Account/userCredentials?isStudent=false");

			FirstName = teacher.Name;
			LastName = teacher.Surname;
		}
		



		/// Wiem, pamiętam! Poprawię jak będę pushować Teachera ;)
		//User = await AppHttpClient.Get<UserInfoGetDto>("Account/userCredentials");
		//FirstName = User.Name;
		//LastName = User.Surname;
	}

	public bool IsUserPadActive = false;

	public string DropListClass()
	{
		return IsUserPadActive ? "drop-list" : "";
	}

	public void ChangeStatus()
	{
		IsUserPadActive = !IsUserPadActive;
	}

	public void Logout()
	{
		NavigationManager.NavigateTo("/login");
	} 

}
